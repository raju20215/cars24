{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12588534,"sourceType":"datasetVersion","datasetId":7950671}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"car24 price prediction","provenance":[]}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input/used-cars-prices-cars-24'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:09:55.9815Z","iopub.execute_input":"2025-09-01T07:09:55.98184Z","iopub.status.idle":"2025-09-01T07:09:55.992012Z","shell.execute_reply.started":"2025-09-01T07:09:55.98181Z","shell.execute_reply":"2025-09-01T07:09:55.991187Z"},"id":"C4gw9J--K55r"},"outputs":[],"execution_count":6},{"cell_type":"code","source":"path1='/content/Cars24.csv'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:09:55.993419Z","iopub.execute_input":"2025-09-01T07:09:55.993722Z","iopub.status.idle":"2025-09-01T07:09:56.005235Z","shell.execute_reply.started":"2025-09-01T07:09:55.993698Z","shell.execute_reply":"2025-09-01T07:09:56.004347Z"},"id":"a6gYX8P6K55t"},"outputs":[],"execution_count":21},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score, mean_absolute_error\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:09:56.005992Z","iopub.execute_input":"2025-09-01T07:09:56.006229Z","iopub.status.idle":"2025-09-01T07:09:56.022702Z","shell.execute_reply.started":"2025-09-01T07:09:56.006211Z","shell.execute_reply":"2025-09-01T07:09:56.021851Z"},"id":"l3zHxxvLK55u"},"outputs":[],"execution_count":22},{"cell_type":"code","source":"\n# Load the dataset\ndf = pd.read_csv(path1)\n\n# --- Start of Correction ---\n# Force 'Price(in Lakhs)' to be numeric, converting non-numeric values to NaN\ndf['Price(in Lakhs)'] = pd.to_numeric(df['Price(in Lakhs)'], errors='coerce')\n\n# Drop rows where the price is NaN, and check the result\n\ndf=df.dropna()\n\n# --- End of Correction ---\n\n# 1. Extract Car Brand\ndf['Brand'] = df['Car Model'].apply(lambda x: x.split(' ')[0])\n# Now create a new column \"Model_Only\" by removing the brand from Car Model\ndf[\"Model_Only\"] = df[\"Car Model\"].astype(str).apply(lambda x: \" \".join(x.split()[1:]))\n# 2. Calculate Car Age\ncurrent_year = 2025\ndf['Car Age'] = current_year - df['Year']\n\n# 3. Clean Ownership column\ndf['Ownership'] = df['Ownership'].str.extract('(\\d+)').astype(int)\n\n# 4. Drop redundant or less useful columns\ndf_processed = df.drop(columns=['Year', 'Car Model', 'Car Variant', 'Location'])\n\nprint(\"\\nProcessed Data Head:\")\nprint(df_processed.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:09:56.023725Z","iopub.execute_input":"2025-09-01T07:09:56.024057Z","iopub.status.idle":"2025-09-01T07:09:56.09084Z","shell.execute_reply.started":"2025-09-01T07:09:56.02403Z","shell.execute_reply":"2025-09-01T07:09:56.08991Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"v9nUMWV7K55v","outputId":"1734d330-98d8-49a2-e788-c6079840e90a"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Processed Data Head:\n","   KM Driven Fuel Type Transmission Type  Ownership  Price(in Lakhs)  \\\n","0      60660    Diesel            Manual          1             2.79   \n","1     150000    Petrol            Manual          2             3.57   \n","2      48700    Diesel            Manual          2            11.63   \n","3      55800    Petrol            Manual          3             1.46   \n","4      49320    Petrol            Manual          1             1.79   \n","\n","        Brand   Model_Only  Car Age  \n","0      Maruti        Swift       10  \n","1      Maruti  Swift Dzire        6  \n","2    Mahindra       XUV500        4  \n","3      Maruti       OMNI E       10  \n","4  Volkswagen        Vento       15  \n"]},{"output_type":"stream","name":"stderr","text":["<>:23: SyntaxWarning: invalid escape sequence '\\d'\n","<>:23: SyntaxWarning: invalid escape sequence '\\d'\n","/tmp/ipython-input-2202681250.py:23: SyntaxWarning: invalid escape sequence '\\d'\n","  df['Ownership'] = df['Ownership'].str.extract('(\\d+)').astype(int)\n"]}],"execution_count":23},{"cell_type":"code","source":"df['Ownership'].unique()","metadata":{"trusted":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"ctCVD0N0K55w","outputId":"58ae55bf-2859-40f0-bc2e-fe46dfc7a9ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  2,  3,  5,  4,  7,  6,  8, 10])"]},"metadata":{},"execution_count":24}],"execution_count":24},{"cell_type":"code","source":"df_processed.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:09:56.548544Z","iopub.execute_input":"2025-09-01T07:09:56.548824Z","iopub.status.idle":"2025-09-01T07:09:56.559747Z","shell.execute_reply.started":"2025-09-01T07:09:56.548804Z","shell.execute_reply":"2025-09-01T07:09:56.559015Z"},"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"cN5E_zp3K55x","outputId":"6d76b259-2505-4b29-d14b-8e4d1b331900"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   KM Driven Fuel Type Transmission Type  Ownership  Price(in Lakhs)  \\\n","0      60660    Diesel            Manual          1             2.79   \n","1     150000    Petrol            Manual          2             3.57   \n","2      48700    Diesel            Manual          2            11.63   \n","3      55800    Petrol            Manual          3             1.46   \n","4      49320    Petrol            Manual          1             1.79   \n","\n","        Brand   Model_Only  Car Age  \n","0      Maruti        Swift       10  \n","1      Maruti  Swift Dzire        6  \n","2    Mahindra       XUV500        4  \n","3      Maruti       OMNI E       10  \n","4  Volkswagen        Vento       15  "],"text/html":["\n","  <div id=\"df-5ac0de46-a5b1-4e31-82ec-b91b5d15045a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>KM Driven</th>\n","      <th>Fuel Type</th>\n","      <th>Transmission Type</th>\n","      <th>Ownership</th>\n","      <th>Price(in Lakhs)</th>\n","      <th>Brand</th>\n","      <th>Model_Only</th>\n","      <th>Car Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>60660</td>\n","      <td>Diesel</td>\n","      <td>Manual</td>\n","      <td>1</td>\n","      <td>2.79</td>\n","      <td>Maruti</td>\n","      <td>Swift</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>150000</td>\n","      <td>Petrol</td>\n","      <td>Manual</td>\n","      <td>2</td>\n","      <td>3.57</td>\n","      <td>Maruti</td>\n","      <td>Swift Dzire</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>48700</td>\n","      <td>Diesel</td>\n","      <td>Manual</td>\n","      <td>2</td>\n","      <td>11.63</td>\n","      <td>Mahindra</td>\n","      <td>XUV500</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>55800</td>\n","      <td>Petrol</td>\n","      <td>Manual</td>\n","      <td>3</td>\n","      <td>1.46</td>\n","      <td>Maruti</td>\n","      <td>OMNI E</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>49320</td>\n","      <td>Petrol</td>\n","      <td>Manual</td>\n","      <td>1</td>\n","      <td>1.79</td>\n","      <td>Volkswagen</td>\n","      <td>Vento</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ac0de46-a5b1-4e31-82ec-b91b5d15045a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5ac0de46-a5b1-4e31-82ec-b91b5d15045a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5ac0de46-a5b1-4e31-82ec-b91b5d15045a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b0ce12b3-65a0-4658-a9f8-ffe67f2bbb1e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0ce12b3-65a0-4658-a9f8-ffe67f2bbb1e')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b0ce12b3-65a0-4658-a9f8-ffe67f2bbb1e button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_processed","summary":"{\n  \"name\": \"df_processed\",\n  \"rows\": 9172,\n  \"fields\": [\n    {\n      \"column\": \"KM Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 395570,\n        \"min\": 1,\n        \"max\": 37270000,\n        \"num_unique_values\": 4525,\n        \"samples\": [\n          87920,\n          87460,\n          46290\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Petrol\",\n          \"Hybrid\",\n          \"Electric\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Auto\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ownership\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          8,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price(in Lakhs)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.335063828724732,\n        \"min\": 0.3,\n        \"max\": 67.0,\n        \"num_unique_values\": 1474,\n        \"samples\": [\n          13.25,\n          1.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Volvo\",\n          \"KIA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model_Only\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 274,\n        \"samples\": [\n          \"i10\",\n          \"Curvv EV\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Car Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 24,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          10,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}],"execution_count":25},{"cell_type":"code","source":"df_processed.to_csv('cars24_cleaned.csv')","metadata":{"id":"YkFujv-gLmZ-"},"outputs":[],"execution_count":26},{"cell_type":"code","source":"\nX = df_processed.drop('Price(in Lakhs)', axis=1)\ny = df_processed['Price(in Lakhs)']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nnumerical_features = ['KM Driven', 'Ownership', 'Car Age']\ncategorical_features = ['Fuel Type', 'Transmission Type', 'Brand','Model_Only',]\n\nnumerical_transformer = StandardScaler()\ncategorical_transformer = OneHotEncoder(handle_unknown='ignore')\n\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_features),\n        ('cat', categorical_transformer, categorical_features)\n    ],\n    remainder='passthrough'\n)\n\n\n# 1. Linear Regression\nlr_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('regressor', LinearRegression())])\nlr_pipeline.fit(X_train, y_train)\nlr_preds = lr_pipeline.predict(X_test)\nlr_r2 = r2_score(y_test, lr_preds)\n\n# 2. Random Forest Regressor\nrf_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('regressor', RandomForestRegressor(random_state=42))])\nrf_pipeline.fit(X_train, y_train)\nrf_preds = rf_pipeline.predict(X_test)\nrf_r2 = r2_score(y_test, rf_preds)\n\n# 3. XGBoost Regressor\nxgb_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                               ('regressor', XGBRegressor(random_state=42))])\nxgb_pipeline.fit(X_train, y_train)\nxgb_preds = xgb_pipeline.predict(X_test)\nxgb_r2 = r2_score(y_test, xgb_preds)\n\n# --- Print Results ---\nprint(\"\\n--- Train Baseline Model Performance ---\")\nprint(f\" Linear Regression R2 Score: {lr_pipeline.score(X_train, y_train)*100:.4f}\")\nprint(f\"Random Forest R2 Score: {rf_pipeline.score(X_train, y_train)*100:.4f}\")\nprint(f\"XGBoost R2 Score: {xgb_pipeline.score(X_train, y_train)*100:.4f}\")\nprint(\"\\n--- Test  Baseline Model Performance ---\")\nprint(f\" Linear Regression R2 Score: {lr_r2*100:.4f}\")\nprint(f\"Random Forest R2 Score: {rf_r2*100:.4f}\")\nprint(f\"XGBoost R2 Score: {xgb_r2*100:.4f}\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:09:56.560526Z","iopub.execute_input":"2025-09-01T07:09:56.56085Z","iopub.status.idle":"2025-09-01T07:10:14.315523Z","shell.execute_reply.started":"2025-09-01T07:09:56.560823Z","shell.execute_reply":"2025-09-01T07:10:14.314063Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"lICD8DyrK55y","outputId":"13db650a-e69e-4bca-8219-8e5b67a9d294"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Train Baseline Model Performance ---\n"," Linear Regression R2 Score: 85.4126\n","Random Forest R2 Score: 97.6184\n","XGBoost R2 Score: 95.4175\n","\n","--- Test  Baseline Model Performance ---\n"," Linear Regression R2 Score: 79.5840\n","Random Forest R2 Score: 86.4866\n","XGBoost R2 Score: 87.7735\n"]}],"execution_count":38},{"cell_type":"code","source":"# Define the parameter grid for XGBoost\nparam_grid = {\n    'regressor__n_estimators': [100, 200, 500, 1000,1200,1300,1500],\n    'regressor__learning_rate': [0.01, 0.05, 0.1, 0.2,0.3,0.4,0.6,0.7],\n    'regressor__max_depth': [3, 5, 7, 9,11,13,15],\n    'regressor__subsample': [0.7, 0.8, 0.9, 1.0,1.2,1.3,1.4],\n    'regressor__colsample_bytree': [0.7, 0.8, 0.9, 1.0,1.3,.14],\n    'regressor__gamma': [0, 0.1, 0.2,0.09,0.3]\n}\n\n# Set up RandomizedSearchCV\nrandom_search = RandomizedSearchCV(\n    estimator=xgb_pipeline,\n    param_distributions=param_grid,\n    n_iter=50,\n    cv=5,\n    verbose=1,\n    random_state=42,\n    n_jobs=-1\n)\n\n# Fit the model\nprint(\"\\n--- Starting Hyperparameter Tuning for XGBoost ---\")\nrandom_search.fit(X_train, y_train)\n\n# Get the best estimator and its parameters\nbest_xgb_model = random_search.best_estimator_\nprint(f\"\\nBest Hyperparameters Found: {random_search.best_params_}\")\n\n\n# Evaluate the tuned model\nfinal_preds = best_xgb_model.predict(X_test)\nfinal_r2 = r2_score(y_test, final_preds)\nfinal_mae = mean_absolute_error(y_test, final_preds)\n\nprint(\"\\n--- Final Tuned Model Performance ---\")\nprint(f\"Final R2 Score: {final_r2:.4f}\")\nprint(f\"Final Mean Absolute Error (in Lakhs): {final_mae:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:10:17.8176Z","iopub.status.idle":"2025-09-01T07:10:17.817971Z","shell.execute_reply.started":"2025-09-01T07:10:17.817795Z","shell.execute_reply":"2025-09-01T07:10:17.817812Z"},"id":"u-tXphf1K55z"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_processed.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlOnVvxjNK60","outputId":"457a4a13-9c9d-468b-a56a-aaaa67df957d"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 9172 entries, 0 to 9175\n","Data columns (total 8 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   KM Driven          9172 non-null   int64  \n"," 1   Fuel Type          9172 non-null   object \n"," 2   Transmission Type  9172 non-null   object \n"," 3   Ownership          9172 non-null   int64  \n"," 4   Price(in Lakhs)    9172 non-null   float64\n"," 5   Brand              9172 non-null   object \n"," 6   Model_Only         9172 non-null   object \n"," 7   Car Age            9172 non-null   int64  \n","dtypes: float64(1), int64(3), object(4)\n","memory usage: 644.9+ KB\n"]}],"execution_count":17},{"cell_type":"code","source":"\nimport pandas as pd\nimport numpy as np\nimport pickle\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBRegressor\n\n\nX = df_processed.drop('Price(in Lakhs)', axis=1)\ny = df_processed['Price(in Lakhs)']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nnumerical_features = ['KM Driven', 'Ownership', 'Car Age']\ncategorical_features = ['Fuel Type', 'Transmission Type', 'Brand','Model_Only']\n\n\nnumerical_transformer = StandardScaler()\ncategorical_transformer = OneHotEncoder(handle_unknown='ignore')\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_features),\n        ('cat', categorical_transformer, categorical_features)\n    ],\n    remainder='passthrough'\n)\n\nbest_params = {\n    'subsample': 0.7,\n    'n_estimators': 1500,\n    'max_depth': 5,\n    'learning_rate': 0.1,\n    'gamma': 0.2,\n    'colsample_bytree': 0.7\n}\n\n\nfinal_model_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('regressor', XGBRegressor(random_state=42, **best_params))\n])\n\n\nprint(\"Training the final model on the entire dataset...\")\nfinal_model_pipeline.fit(X, y)\nprint(\"Model training complete.\")\n\n\n\nwith open('car_price_predictor.pkl', 'wb') as file:\n    pickle.dump(final_model_pipeline, file)\n\nprint(\"\\n✅ Model has been saved successfully as 'car_price_predictor.pkl'\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T07:10:17.821183Z","iopub.status.idle":"2025-09-01T07:10:17.821538Z","shell.execute_reply.started":"2025-09-01T07:10:17.821362Z","shell.execute_reply":"2025-09-01T07:10:17.821378Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"Ujer8GCWK550","outputId":"3fd87634-a0b6-4cc4-99c4-e445b6ef53a5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training the final model on the entire dataset...\n","Model training complete.\n","\n","✅ Model has been saved successfully as 'car_price_predictor.pkl'\n"]}],"execution_count":28},{"cell_type":"code","source":"y_pred=final_model_pipeline.predict(X_test)","metadata":{"trusted":true,"id":"G4Bkgl6DK551"},"outputs":[],"execution_count":29},{"cell_type":"code","source":"print(f\" Train XGBoost R2 Score: {final_model_pipeline.score(X_train,y_train)*100:.4f}\")\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I9pHc0JsNlug","outputId":"1ade9db4-ce21-425d-a7b4-440167f21c73"},"outputs":[{"output_type":"stream","name":"stdout","text":[" Train XGBoost R2 Score: 97.2897\n"]}],"execution_count":34},{"cell_type":"code","source":"print(f\" Test XGBoost R2 Score: {r2_score(y_pred,y_test)*100:.4f}\")","metadata":{"id":"_7CuHYL9C-3L","outputId":"e28e748d-145a-4dfc-9c30-f9ec69e2395c","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":[" Test XGBoost R2 Score: 96.9988\n"]}],"execution_count":35},{"cell_type":"markdown","source":"","metadata":{"id":"XkvPACxDjIVt"}},{"cell_type":"code","source":"","metadata":{"id":"hNIzkzU9E5zc"},"outputs":[],"execution_count":null}]}