{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/palakondarajuuppu/car24-price-prediction?scriptVersionId=259379790\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"da1ac1a2","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-09-01T11:46:40.352335Z","iopub.status.busy":"2025-09-01T11:46:40.352006Z","iopub.status.idle":"2025-09-01T11:46:42.314067Z","shell.execute_reply":"2025-09-01T11:46:42.31291Z"},"id":"C4gw9J--K55r","papermill":{"duration":1.968953,"end_time":"2025-09-01T11:46:42.315699","exception":false,"start_time":"2025-09-01T11:46:40.346746","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/used-cars-prices-cars-24/Cars24.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input/used-cars-prices-cars-24'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":2,"id":"40907403","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:42.324185Z","iopub.status.busy":"2025-09-01T11:46:42.323715Z","iopub.status.idle":"2025-09-01T11:46:42.32788Z","shell.execute_reply":"2025-09-01T11:46:42.327133Z"},"id":"a6gYX8P6K55t","papermill":{"duration":0.009947,"end_time":"2025-09-01T11:46:42.329471","exception":false,"start_time":"2025-09-01T11:46:42.319524","status":"completed"},"tags":[]},"outputs":[],"source":["path1='/kaggle/input/used-cars-prices-cars-24/Cars24.csv'"]},{"cell_type":"code","execution_count":3,"id":"f83fd6a6","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:42.338199Z","iopub.status.busy":"2025-09-01T11:46:42.337193Z","iopub.status.idle":"2025-09-01T11:46:45.356779Z","shell.execute_reply":"2025-09-01T11:46:45.355803Z"},"id":"l3zHxxvLK55u","papermill":{"duration":3.025427,"end_time":"2025-09-01T11:46:45.358402","exception":false,"start_time":"2025-09-01T11:46:42.332975","status":"completed"},"tags":[]},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split, RandomizedSearchCV\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.linear_model import LinearRegression\n","from sklearn.ensemble import RandomForestRegressor\n","from xgboost import XGBRegressor\n","from sklearn.metrics import r2_score, mean_absolute_error\n"]},{"cell_type":"code","execution_count":4,"id":"d231bf4a","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:45.36708Z","iopub.status.busy":"2025-09-01T11:46:45.366587Z","iopub.status.idle":"2025-09-01T11:46:45.471897Z","shell.execute_reply":"2025-09-01T11:46:45.470874Z"},"id":"v9nUMWV7K55v","outputId":"1734d330-98d8-49a2-e788-c6079840e90a","papermill":{"duration":0.111453,"end_time":"2025-09-01T11:46:45.473586","exception":false,"start_time":"2025-09-01T11:46:45.362133","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Processed Data Head:\n","   KM Driven Fuel Type Transmission Type  Ownership  Price(in Lakhs)  \\\n","0      60660    Diesel            Manual          1             2.79   \n","1     150000    Petrol            Manual          2             3.57   \n","2      48700    Diesel            Manual          2            11.63   \n","3      55800    Petrol            Manual          3             1.46   \n","4      49320    Petrol            Manual          1             1.79   \n","\n","        Brand   Model_Only  Car Age  \n","0      Maruti        Swift       10  \n","1      Maruti  Swift Dzire        6  \n","2    Mahindra       XUV500        4  \n","3      Maruti       OMNI E       10  \n","4  Volkswagen        Vento       15  \n"]}],"source":["\n","# Load the dataset\n","df = pd.read_csv(path1)\n","\n","# --- Start of Correction ---\n","# Force 'Price(in Lakhs)' to be numeric, converting non-numeric values to NaN\n","df['Price(in Lakhs)'] = pd.to_numeric(df['Price(in Lakhs)'], errors='coerce')\n","\n","# Drop rows where the price is NaN, and check the result\n","\n","df=df.dropna()\n","\n","# --- End of Correction ---\n","\n","# 1. Extract Car Brand\n","df['Brand'] = df['Car Model'].apply(lambda x: x.split(' ')[0])\n","# Now create a new column \"Model_Only\" by removing the brand from Car Model\n","df[\"Model_Only\"] = df[\"Car Model\"].astype(str).apply(lambda x: \" \".join(x.split()[1:]))\n","# 2. Calculate Car Age\n","current_year = 2025\n","df['Car Age'] = current_year - df['Year']\n","\n","# 3. Clean Ownership column\n","df['Ownership'] = df['Ownership'].str.extract('(\\d+)').astype(int)\n","\n","# 4. Drop redundant or less useful columns\n","df_processed = df.drop(columns=['Year', 'Car Model', 'Car Variant', 'Location'])\n","\n","print(\"\\nProcessed Data Head:\")\n","print(df_processed.head())"]},{"cell_type":"code","execution_count":5,"id":"7c03e791","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:45.481724Z","iopub.status.busy":"2025-09-01T11:46:45.481419Z","iopub.status.idle":"2025-09-01T11:46:45.490129Z","shell.execute_reply":"2025-09-01T11:46:45.489148Z"},"id":"ctCVD0N0K55w","outputId":"58ae55bf-2859-40f0-bc2e-fe46dfc7a9ed","papermill":{"duration":0.014488,"end_time":"2025-09-01T11:46:45.491634","exception":false,"start_time":"2025-09-01T11:46:45.477146","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["array([ 1,  2,  3,  5,  4,  7,  6,  8, 10])"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["df['Ownership'].unique()"]},{"cell_type":"code","execution_count":6,"id":"1dc63f19","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:45.500249Z","iopub.status.busy":"2025-09-01T11:46:45.499934Z","iopub.status.idle":"2025-09-01T11:46:45.517605Z","shell.execute_reply":"2025-09-01T11:46:45.516687Z"},"id":"cN5E_zp3K55x","outputId":"6d76b259-2505-4b29-d14b-8e4d1b331900","papermill":{"duration":0.023835,"end_time":"2025-09-01T11:46:45.519028","exception":false,"start_time":"2025-09-01T11:46:45.495193","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>KM Driven</th>\n","      <th>Fuel Type</th>\n","      <th>Transmission Type</th>\n","      <th>Ownership</th>\n","      <th>Price(in Lakhs)</th>\n","      <th>Brand</th>\n","      <th>Model_Only</th>\n","      <th>Car Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>60660</td>\n","      <td>Diesel</td>\n","      <td>Manual</td>\n","      <td>1</td>\n","      <td>2.79</td>\n","      <td>Maruti</td>\n","      <td>Swift</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>150000</td>\n","      <td>Petrol</td>\n","      <td>Manual</td>\n","      <td>2</td>\n","      <td>3.57</td>\n","      <td>Maruti</td>\n","      <td>Swift Dzire</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>48700</td>\n","      <td>Diesel</td>\n","      <td>Manual</td>\n","      <td>2</td>\n","      <td>11.63</td>\n","      <td>Mahindra</td>\n","      <td>XUV500</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>55800</td>\n","      <td>Petrol</td>\n","      <td>Manual</td>\n","      <td>3</td>\n","      <td>1.46</td>\n","      <td>Maruti</td>\n","      <td>OMNI E</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>49320</td>\n","      <td>Petrol</td>\n","      <td>Manual</td>\n","      <td>1</td>\n","      <td>1.79</td>\n","      <td>Volkswagen</td>\n","      <td>Vento</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   KM Driven Fuel Type Transmission Type  Ownership  Price(in Lakhs)  \\\n","0      60660    Diesel            Manual          1             2.79   \n","1     150000    Petrol            Manual          2             3.57   \n","2      48700    Diesel            Manual          2            11.63   \n","3      55800    Petrol            Manual          3             1.46   \n","4      49320    Petrol            Manual          1             1.79   \n","\n","        Brand   Model_Only  Car Age  \n","0      Maruti        Swift       10  \n","1      Maruti  Swift Dzire        6  \n","2    Mahindra       XUV500        4  \n","3      Maruti       OMNI E       10  \n","4  Volkswagen        Vento       15  "]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["df_processed.head()"]},{"cell_type":"code","execution_count":7,"id":"e71497bc","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:45.527662Z","iopub.status.busy":"2025-09-01T11:46:45.527371Z","iopub.status.idle":"2025-09-01T11:46:45.56915Z","shell.execute_reply":"2025-09-01T11:46:45.568275Z"},"id":"YkFujv-gLmZ-","papermill":{"duration":0.048166,"end_time":"2025-09-01T11:46:45.570995","exception":false,"start_time":"2025-09-01T11:46:45.522829","status":"completed"},"tags":[]},"outputs":[],"source":["df_processed.to_csv('cars24_cleaned.csv')"]},{"cell_type":"code","execution_count":8,"id":"a0719154","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:46:45.579933Z","iopub.status.busy":"2025-09-01T11:46:45.579607Z","iopub.status.idle":"2025-09-01T11:47:03.815056Z","shell.execute_reply":"2025-09-01T11:47:03.81334Z"},"id":"lICD8DyrK55y","outputId":"13db650a-e69e-4bca-8219-8e5b67a9d294","papermill":{"duration":18.241722,"end_time":"2025-09-01T11:47:03.816674","exception":false,"start_time":"2025-09-01T11:46:45.574952","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","--- Train Baseline Model Performance ---\n"," Linear Regression R2 Score: 85.4126\n","Random Forest R2 Score: 97.6184\n","XGBoost R2 Score: 95.4175\n","\n","--- Test  Baseline Model Performance ---\n"," Linear Regression R2 Score: 79.5839\n","Random Forest R2 Score: 86.4866\n","XGBoost R2 Score: 87.7735\n"]}],"source":["\n","X = df_processed.drop('Price(in Lakhs)', axis=1)\n","y = df_processed['Price(in Lakhs)']\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","\n","numerical_features = ['KM Driven', 'Ownership', 'Car Age']\n","categorical_features = ['Fuel Type', 'Transmission Type', 'Brand','Model_Only',]\n","\n","numerical_transformer = StandardScaler()\n","categorical_transformer = OneHotEncoder(handle_unknown='ignore')\n","\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numerical_transformer, numerical_features),\n","        ('cat', categorical_transformer, categorical_features)\n","    ],\n","    remainder='passthrough'\n",")\n","\n","\n","# 1. Linear Regression\n","lr_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n","                              ('regressor', LinearRegression())])\n","lr_pipeline.fit(X_train, y_train)\n","lr_preds = lr_pipeline.predict(X_test)\n","lr_r2 = r2_score(y_test, lr_preds)\n","\n","# 2. Random Forest Regressor\n","rf_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n","                              ('regressor', RandomForestRegressor(random_state=42))])\n","rf_pipeline.fit(X_train, y_train)\n","rf_preds = rf_pipeline.predict(X_test)\n","rf_r2 = r2_score(y_test, rf_preds)\n","\n","# 3. XGBoost Regressor\n","xgb_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n","                               ('regressor', XGBRegressor(random_state=42))])\n","xgb_pipeline.fit(X_train, y_train)\n","xgb_preds = xgb_pipeline.predict(X_test)\n","xgb_r2 = r2_score(y_test, xgb_preds)\n","\n","# --- Print Results ---\n","print(\"\\n--- Train Baseline Model Performance ---\")\n","print(f\" Linear Regression R2 Score: {lr_pipeline.score(X_train, y_train)*100:.4f}\")\n","print(f\"Random Forest R2 Score: {rf_pipeline.score(X_train, y_train)*100:.4f}\")\n","print(f\"XGBoost R2 Score: {xgb_pipeline.score(X_train, y_train)*100:.4f}\")\n","print(\"\\n--- Test  Baseline Model Performance ---\")\n","print(f\" Linear Regression R2 Score: {lr_r2*100:.4f}\")\n","print(f\"Random Forest R2 Score: {rf_r2*100:.4f}\")\n","print(f\"XGBoost R2 Score: {xgb_r2*100:.4f}\")\n","\n"]},{"cell_type":"code","execution_count":9,"id":"10d51065","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:47:03.825564Z","iopub.status.busy":"2025-09-01T11:47:03.825211Z","iopub.status.idle":"2025-09-01T11:48:26.932511Z","shell.execute_reply":"2025-09-01T11:48:26.930848Z"},"id":"u-tXphf1K55z","papermill":{"duration":83.113488,"end_time":"2025-09-01T11:48:26.93415","exception":false,"start_time":"2025-09-01T11:47:03.820662","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","--- Starting Hyperparameter Tuning for XGBoost ---\n","Fitting 5 folds for each of 50 candidates, totalling 250 fits\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","125 fits failed out of a total of 250.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","15 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/pipeline.py\", line 405, in fit\n","    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\", line 1090, in fit\n","    self._Booster = train(\n","                    ^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/training.py\", line 181, in train\n","    bst.update(dtrain, i, obj)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 2050, in update\n","    _check_call(\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 282, in _check_call\n","    raise XGBoostError(py_str(_LIB.XGBGetLastError()))\n","xgboost.core.XGBoostError: value 1.4 for Parameter subsample exceed bound [0,1]\n","subsample: Row subsample ratio of training instance.\n","\n","--------------------------------------------------------------------------------\n","75 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/pipeline.py\", line 405, in fit\n","    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\", line 1090, in fit\n","    self._Booster = train(\n","                    ^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/training.py\", line 181, in train\n","    bst.update(dtrain, i, obj)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 2050, in update\n","    _check_call(\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 282, in _check_call\n","    raise XGBoostError(py_str(_LIB.XGBGetLastError()))\n","xgboost.core.XGBoostError: value 1.3 for Parameter colsample_bytree exceed bound [0,1]\n","colsample_bytree: Subsample ratio of columns, resample on each tree construction.\n","\n","--------------------------------------------------------------------------------\n","25 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/pipeline.py\", line 405, in fit\n","    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\", line 1090, in fit\n","    self._Booster = train(\n","                    ^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/training.py\", line 181, in train\n","    bst.update(dtrain, i, obj)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 2050, in update\n","    _check_call(\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 282, in _check_call\n","    raise XGBoostError(py_str(_LIB.XGBGetLastError()))\n","xgboost.core.XGBoostError: value 1.3 for Parameter subsample exceed bound [0,1]\n","subsample: Row subsample ratio of training instance.\n","\n","--------------------------------------------------------------------------------\n","10 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.11/dist-packages/sklearn/pipeline.py\", line 405, in fit\n","    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py\", line 1090, in fit\n","    self._Booster = train(\n","                    ^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 730, in inner_f\n","    return func(**kwargs)\n","           ^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/training.py\", line 181, in train\n","    bst.update(dtrain, i, obj)\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 2050, in update\n","    _check_call(\n","  File \"/usr/local/lib/python3.11/dist-packages/xgboost/core.py\", line 282, in _check_call\n","    raise XGBoostError(py_str(_LIB.XGBGetLastError()))\n","xgboost.core.XGBoostError: value 1.2 for Parameter subsample exceed bound [0,1]\n","subsample: Row subsample ratio of training instance.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.86133578        nan 0.80626388        nan 0.87324801 0.85174289\n"," 0.84946225        nan 0.82273433 0.81163629        nan        nan\n","        nan        nan        nan        nan        nan        nan\n"," 0.85284945 0.84986045 0.70193214 0.85964785 0.8373679  0.42926613\n","        nan        nan 0.58038677        nan        nan        nan\n"," 0.84985055        nan 0.69636363        nan        nan 0.86035365\n"," 0.79013937 0.86778625 0.81234768 0.84578001 0.84754882        nan\n","        nan        nan 0.85462286 0.80538979        nan 0.65185743\n","        nan        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["\n","Best Hyperparameters Found: {'regressor__subsample': 0.7, 'regressor__n_estimators': 1500, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'regressor__gamma': 0.2, 'regressor__colsample_bytree': 0.7}\n","\n","--- Final Tuned Model Performance ---\n","Final R2 Score: 0.8952\n","Final Mean Absolute Error (in Lakhs): 0.9548\n"]}],"source":["# Define the parameter grid for XGBoost\n","param_grid = {\n","    'regressor__n_estimators': [100, 200, 500, 1000,1200,1300,1500],\n","    'regressor__learning_rate': [0.01, 0.05, 0.1, 0.2,0.3,0.4,0.6,0.7],\n","    'regressor__max_depth': [3, 5, 7, 9,11,13,15],\n","    'regressor__subsample': [0.7, 0.8, 0.9, 1.0,1.2,1.3,1.4],\n","    'regressor__colsample_bytree': [0.7, 0.8, 0.9, 1.0,1.3,.14],\n","    'regressor__gamma': [0, 0.1, 0.2,0.09,0.3]\n","}\n","\n","# Set up RandomizedSearchCV\n","random_search = RandomizedSearchCV(\n","    estimator=xgb_pipeline,\n","    param_distributions=param_grid,\n","    n_iter=50,\n","    cv=5,\n","    verbose=1,\n","    random_state=42,\n","    n_jobs=-1\n",")\n","\n","# Fit the model\n","print(\"\\n--- Starting Hyperparameter Tuning for XGBoost ---\")\n","random_search.fit(X_train, y_train)\n","\n","# Get the best estimator and its parameters\n","best_xgb_model = random_search.best_estimator_\n","print(f\"\\nBest Hyperparameters Found: {random_search.best_params_}\")\n","\n","\n","# Evaluate the tuned model\n","final_preds = best_xgb_model.predict(X_test)\n","final_r2 = r2_score(y_test, final_preds)\n","final_mae = mean_absolute_error(y_test, final_preds)\n","\n","print(\"\\n--- Final Tuned Model Performance ---\")\n","print(f\"Final R2 Score: {final_r2:.4f}\")\n","print(f\"Final Mean Absolute Error (in Lakhs): {final_mae:.4f}\")\n"]},{"cell_type":"code","execution_count":10,"id":"06a2fbf6","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:48:26.943546Z","iopub.status.busy":"2025-09-01T11:48:26.943211Z","iopub.status.idle":"2025-09-01T11:48:26.963384Z","shell.execute_reply":"2025-09-01T11:48:26.96218Z"},"id":"AlOnVvxjNK60","outputId":"457a4a13-9c9d-468b-a56a-aaaa67df957d","papermill":{"duration":0.026432,"end_time":"2025-09-01T11:48:26.964824","exception":false,"start_time":"2025-09-01T11:48:26.938392","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 9172 entries, 0 to 9175\n","Data columns (total 8 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   KM Driven          9172 non-null   int64  \n"," 1   Fuel Type          9172 non-null   object \n"," 2   Transmission Type  9172 non-null   object \n"," 3   Ownership          9172 non-null   int64  \n"," 4   Price(in Lakhs)    9172 non-null   float64\n"," 5   Brand              9172 non-null   object \n"," 6   Model_Only         9172 non-null   object \n"," 7   Car Age            9172 non-null   int64  \n","dtypes: float64(1), int64(3), object(4)\n","memory usage: 644.9+ KB\n"]}],"source":["df_processed.info()"]},{"cell_type":"code","execution_count":11,"id":"50257f35","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:48:26.974704Z","iopub.status.busy":"2025-09-01T11:48:26.974372Z","iopub.status.idle":"2025-09-01T11:48:28.324521Z","shell.execute_reply":"2025-09-01T11:48:28.323532Z"},"id":"Ujer8GCWK550","outputId":"3fd87634-a0b6-4cc4-99c4-e445b6ef53a5","papermill":{"duration":1.356938,"end_time":"2025-09-01T11:48:28.326039","exception":false,"start_time":"2025-09-01T11:48:26.969101","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Training the final model on the entire dataset...\n","Model training complete.\n","\n","✅ Model has been saved successfully as 'car_price_predictor.pkl'\n"]}],"source":["\n","import pandas as pd\n","import numpy as np\n","import pickle\n","from sklearn.model_selection import train_test_split, RandomizedSearchCV\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from xgboost import XGBRegressor\n","\n","\n","X = df_processed.drop('Price(in Lakhs)', axis=1)\n","y = df_processed['Price(in Lakhs)']\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","numerical_features = ['KM Driven', 'Ownership', 'Car Age']\n","categorical_features = ['Fuel Type', 'Transmission Type', 'Brand','Model_Only']\n","\n","\n","numerical_transformer = StandardScaler()\n","categorical_transformer = OneHotEncoder(handle_unknown='ignore')\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numerical_transformer, numerical_features),\n","        ('cat', categorical_transformer, categorical_features)\n","    ],\n","    remainder='passthrough'\n",")\n","\n","best_params = {\n","    'subsample': 0.7,\n","    'n_estimators': 1500,\n","    'max_depth': 5,\n","    'learning_rate': 0.1,\n","    'gamma': 0.2,\n","    'colsample_bytree': 0.7\n","}\n","\n","\n","final_model_pipeline = Pipeline(steps=[\n","    ('preprocessor', preprocessor),\n","    ('regressor', XGBRegressor(random_state=42, **best_params))\n","])\n","\n","\n","print(\"Training the final model on the entire dataset...\")\n","final_model_pipeline.fit(X, y)\n","print(\"Model training complete.\")\n","\n","\n","\n","with open('car_price_predictor.pkl', 'wb') as file:\n","    pickle.dump(final_model_pipeline, file)\n","\n","print(\"\\n✅ Model has been saved successfully as 'car_price_predictor.pkl'\")"]},{"cell_type":"code","execution_count":12,"id":"f1d8e7b2","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:48:28.336369Z","iopub.status.busy":"2025-09-01T11:48:28.335544Z","iopub.status.idle":"2025-09-01T11:48:28.412535Z","shell.execute_reply":"2025-09-01T11:48:28.411726Z"},"id":"G4Bkgl6DK551","papermill":{"duration":0.083888,"end_time":"2025-09-01T11:48:28.414347","exception":false,"start_time":"2025-09-01T11:48:28.330459","status":"completed"},"tags":[]},"outputs":[],"source":["y_pred=final_model_pipeline.predict(X_test)"]},{"cell_type":"code","execution_count":13,"id":"c389f5b4","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:48:28.424853Z","iopub.status.busy":"2025-09-01T11:48:28.424545Z","iopub.status.idle":"2025-09-01T11:48:28.70036Z","shell.execute_reply":"2025-09-01T11:48:28.699612Z"},"id":"I9pHc0JsNlug","outputId":"1ade9db4-ce21-425d-a7b4-440167f21c73","papermill":{"duration":0.282864,"end_time":"2025-09-01T11:48:28.702055","exception":false,"start_time":"2025-09-01T11:48:28.419191","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":[" Train XGBoost R2 Score: 97.2897\n"]}],"source":["print(f\" Train XGBoost R2 Score: {final_model_pipeline.score(X_train,y_train)*100:.4f}\")\n"]},{"cell_type":"code","execution_count":14,"id":"0e76a91e","metadata":{"execution":{"iopub.execute_input":"2025-09-01T11:48:28.712052Z","iopub.status.busy":"2025-09-01T11:48:28.711724Z","iopub.status.idle":"2025-09-01T11:48:28.718012Z","shell.execute_reply":"2025-09-01T11:48:28.717037Z"},"id":"_7CuHYL9C-3L","outputId":"e28e748d-145a-4dfc-9c30-f9ec69e2395c","papermill":{"duration":0.012992,"end_time":"2025-09-01T11:48:28.719537","exception":false,"start_time":"2025-09-01T11:48:28.706545","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":[" Test XGBoost R2 Score: 96.9988\n"]}],"source":["print(f\" Test XGBoost R2 Score: {r2_score(y_pred,y_test)*100:.4f}\")"]},{"cell_type":"markdown","id":"abf326d8","metadata":{"id":"XkvPACxDjIVt","papermill":{"duration":0.004207,"end_time":"2025-09-01T11:48:28.728653","exception":false,"start_time":"2025-09-01T11:48:28.724446","status":"completed"},"tags":[]},"source":[]},{"cell_type":"code","execution_count":null,"id":"911838f1","metadata":{"id":"hNIzkzU9E5zc","papermill":{"duration":0.00441,"end_time":"2025-09-01T11:48:28.737521","exception":false,"start_time":"2025-09-01T11:48:28.733111","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"colab":{"name":"car24 price prediction","provenance":[]},"kaggle":{"accelerator":"none","dataSources":[{"datasetId":7950671,"sourceId":12588534,"sourceType":"datasetVersion"}],"dockerImageVersionId":31089,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":116.302793,"end_time":"2025-09-01T11:48:31.360923","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-09-01T11:46:35.05813","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}